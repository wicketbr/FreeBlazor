@page "/AutoComplete"

<h1>AutoComplete</h1>

@if (_showSampleText) {
    for (int x = 0; x < 25; x++) {
        <div class="mb-2">
            Lorem ipsum odor amet, consectetuer adipiscing elit. Maecenas aliquam dictum sit taciti eget sociosqu semper nullam. Porta mauris curae enim risus, rhoncus efficitur. Commodo ante dignissim feugiat taciti, dis habitasse neque ac quis. Ullamcorper congue dapibus aptent praesent senectus. Egestas maecenas himenaeos arcu taciti viverra purus in.
        </div>
    }
}

<div class="input-group">
    <AutoComplete 
        Disabled="false"
        GetAutoCompleteItems="GetLookupItems"
        HighlightFirstMatch="true"
        Id="search-states"
        LookupDelay="300"
        MatchParentWidth="true"
        MinimumCharacters="1"
        OnSelected="ItemSelected"
        PlaceholderText="Type a Partial US State"
        Class="form-control"
    />
</div>

<div class="mt-2">@_results</div>

@if (_showSampleText) {
    for (int x = 0; x < 25; x++) {
        <div class="mb-2">
            Lorem ipsum odor amet, consectetuer adipiscing elit. Maecenas aliquam dictum sit taciti eget sociosqu semper nullam. Porta mauris curae enim risus, rhoncus efficitur. Commodo ante dignissim feugiat taciti, dis habitasse neque ac quis. Ullamcorper congue dapibus aptent praesent senectus. Egestas maecenas himenaeos arcu taciti viverra purus in.
        </div>
    }
}

@code {
    protected bool _showSampleText = false;
    protected string _results = "";

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) {

        }
    }

    protected List<(string key, string label)> states
    {
        get {
            List<(string key, string label)> output = new List<(string key, string label)> {
                ("AL", "Alabama"),
                ("AK", "Alaska"),
                ("AZ", "Arizona"),
                ("AR", "Arkansas"),
                ("CA", "California"),
                ("CO", "Colorado"),
                ("CT", "Connecticut"),
                ("DE", "Delaware"),
                ("DC", "District of Columbia"),
                ("FL", "Florida"),
                ("GA", "Georgia"),
                ("HI", "Hawaii"),
                ("ID", "Idaho"),
                ("IL", "Illinois"),
                ("IN", "Indiana"),
                ("IA", "Iowa"),
                ("KS", "Kansas"),
                ("KY", "Kentucky"),
                ("LA", "Louisiana"),
                ("ME", "Maine"),
                ("MD", "Maryland"),
                ("MA", "Massachusetts"),
                ("MI", "Michigan"),
                ("MN", "Minnesota"),
                ("MS", "Mississippi"),
                ("MO", "Missouri"),
                ("MT", "Montana"),
                ("NE", "Nebraska"),
                ("NV", "Nevada"),
                ("NH", "New Hampshire"),
                ("NJ", "New Jersey"),
                ("NM", "New Mexico"),
                ("NY", "New York"),
                ("NC", "North Carolina"),
                ("ND", "North Dakota"),
                ("OH", "Ohio"),
                ("OK", "Oklahoma"),
                ("OR", "Oregon"),
                ("PA", "Pennsylvania"),
                ("RI", "Rhode Island"),
                ("SC", "South Carolina"),
                ("SD", "South Dakota"),
                ("TN", "Tennessee"),
                ("TX", "Texas"),
                ("UT", "Utah"),
                ("VT", "Vermont"),
                ("VA", "Virginia"),
                ("WA", "Washington"),
                ("WV", "West Virginia"),
                ("WI", "Wisconsin"),
                ("WY", "Wyoming"),
            };



            return output;
        }
    }

    protected void ItemSelected((string key, string label) item)
    {
        _results = item.key + " - " + item.label;
        StateHasChanged();
    }

    protected async Task<List<(string key, string label)>?> GetLookupItems(string search)
    {
        var output = states.Where(x => x.label.ToLower().Contains(search.ToLower())).ToList();

        return output;
    }
}
