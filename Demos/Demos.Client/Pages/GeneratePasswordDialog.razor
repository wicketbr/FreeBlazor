@inject IJSRuntime jsRuntime
@inject Radzen.DialogService DialogService
<GeneratePassword 
    OnPasswordGenerated="GeneratedPassword"
    LanguageItems="_language"
    Class="@Class"
    Id="@Id"
    Length="@Length"
    RefreshButtonClass="btn btn-primary" 
    RefreshIcon=""
    RequireUpperCase="RequireUpperCase"
    RequireLowerCase="RequireLowerCase"
    RequireNumbers="RequireNumbers"
    RequireSpecialCharacters="RequireSpecialCharacters" />

<button type="button" class="btn btn-dark" @onclick="Cancel">
    <i class="fa-solid fa-xmark"></i> Cancel
</button>
<button type="button" class="btn btn-success" @onclick="PasswordAccepted">
    <i class="fa-solid fa-circle-check"></i> OK
</button>
@code {
    [Parameter] public Delegate? OnPasswordAccepted { get; set; }
    [Parameter] public Delegate? OnPasswordGenerated { get; set; }
    [Parameter] public string Class { get; set; } = "";
    [Parameter] public string? Id { get; set; }
    [Parameter] public int? Length { get; set; }
    [Parameter] public bool? RequireUpperCase { get; set; }
    [Parameter] public bool? RequireLowerCase { get; set; }
    [Parameter] public bool? RequireNumbers { get; set; }
    [Parameter] public bool? RequireSpecialCharacters { get; set; }

    protected string _password = "";

    protected FreeBlazor.GeneratePassword.Language _language = new GeneratePassword.Language {
        PasswordLength = "Password Length",
        Refresh = "Refresh",
        RequireLowercase = "Lowercase",
        RequireNumbers = "Numbers",
        RequireSpecialCharacters = "Special Characters",
        RequireUppercase = "Uppercase",
    };

    protected void Cancel()
    {
        DialogService.Close();
    }

    protected async Task CopyPasswordToClipboard()
    {
        await Helpers.CopyToClipboard(_password);
    }

    protected void GeneratedPassword(string password)
    {
        _password = password;
    }

    protected async Task PasswordAccepted()
    {
        await CopyPasswordToClipboard();

        if (OnPasswordAccepted != null) {
            OnPasswordAccepted.DynamicInvoke(_password);
        }

        DialogService.Close();
    }
}
