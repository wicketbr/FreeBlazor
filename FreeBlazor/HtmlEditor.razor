@inject IJSRuntime jsRuntime
@if (!_editorInstalled) {
    if (_editorLoading) {
        <div>
            Attempting to load the ckEditor.
        </div>
    } else {
        <div>
            The ckEditor was not detected.
        </div>
    }
}
<div class="html-editor">
    <textarea id="@_id" style="display:none;"></textarea>
</div>
@code {
    /// <summary>
    /// Optional HtmlEditorConfiguration to override default value.
    /// </summary>
    [Parameter] public HtmlEditorConfiguration? Config { get; set; }

    /// <summary>
    /// Optional flag used to indicate whether the editor should receive the focus after it has loaded.
    /// </summary>
    [Parameter] public bool? SetFocusOnLoad { get; set; }

    /// <summary>
    /// Optional delegate to be notified when the mode changes between the "source" and "wysiwyg" options.
    /// Since the editor does not update the HTML value when in Source view until you switch back you may
    /// want to use this so you can block your save method until the editor is back in the WYWIWYG mode.
    /// The GetHTML method still works in the source mode, so you would only need to use this if you are
    /// not directly getting the value from the editor.
    /// </summary>
    [Parameter] public Delegate? OnModeChanged { get; set; }

    /// <summary>
    /// An optional delegate that will be called when the editor is updated. This needs to be a delegate that accepts a string value.
    /// </summary>
    [Parameter] public Action<string>? OnUpdate { get; set; }

    /// <summary>
    /// An optional delegate that will be called when the value is updated.
    /// This delegate will receive no parameter.
    /// </summary>
    [Parameter] public Delegate? OnValueChanged { get; set; }

    /// <summary>
    /// Optional HTML to set when the editor is loaded.
    /// </summary>
    [Parameter]
    public string? Value { get; set; }

    protected HtmlEditorConfiguration _config = new HtmlEditorConfiguration();
    protected bool _editorInstalled = true;
    protected bool _editorLoading = false;
    protected string _id = Guid.NewGuid().ToString().Replace("-", "");
    protected IJSObjectReference? jsModule;
    protected string _mode = "editor";
    protected string _value = String.Empty;

    protected DotNetObjectReference<HtmlEditor>? dotNetHelper;

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            HtmlEditorConfiguration c = Config != null ? Config : new HtmlEditorConfiguration();

            List<string> defaultFontSizes = new List<string> { "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72" };
            string defaultFontSizeList = String.Empty;
            foreach(var item in defaultFontSizes) {
                defaultFontSizeList += item + "/" + item + "px;";
            }

            _value = !String.IsNullOrWhiteSpace(Value) ? Value : "";

            _config = new HtmlEditorConfiguration {
                SimpleView = DefaultBooleanValue(c.SimpleView, false),
                HideSourceButton = DefaultBooleanValue(c.HideSourceButton, false),
                Required = DefaultBooleanValue(c.Required, false),
                PlaceholderText = c.PlaceholderText,
                AllowFeatureBold = DefaultBooleanValue(c.AllowFeatureBold, true),
                AllowFeatureItalic = DefaultBooleanValue(c.AllowFeatureItalic, true),
                AllowFeatureUnderline = DefaultBooleanValue(c.AllowFeatureUnderline, true),
                AllowFeatureStrikeThrough = DefaultBooleanValue(c.AllowFeatureStrikeThrough, true),
                AllowFeatureSubscript = DefaultBooleanValue(c.AllowFeatureSubscript, true),
                AllowFeatureSuperscript = DefaultBooleanValue(c.AllowFeatureSuperscript, true),
                AllowFeatureStyleSelector = DefaultBooleanValue(c.AllowFeatureStyleSelector, true),
                AllowFeatureFontSelector = DefaultBooleanValue(c.AllowFeatureFontSelector, true),
                AllowFeatureFonts = !String.IsNullOrWhiteSpace(c.AllowFeatureFonts) 
                    ? c.AllowFeatureFonts 
                    :   "Arial/Arial, Helvetica, sans-serif;" +
                        "Brush Script MT/Brush Script MT, cursive;" +
                        "Courier New/Courier New, monospace;" +
                        "Garamond/Garamond, serif;" +
                        "Georgia/Georgia, serif;" +
                        "Helvetica/Helvetica, sans-serfi;" +
                        "Tahoma/Tahoma/, sans-serif;" +
                        "Times New Roman/Times New Roman, Times, serif;" +
                        "Trebuchet MS/Trebuchet MS, sans-serif;" +
                        "Verdana/Verdana, sans-serif;",
                AllowFeatureFontSizeSelector = DefaultBooleanValue(c.AllowFeatureFontSizeSelector, true),
                AllowFeatureFontSizes = !String.IsNullOrWhiteSpace(c.AllowFeatureFontSizes)
                    ? c.AllowFeatureFontSizes
                    : defaultFontSizeList,
                AllowFeatureFontColorSelector = DefaultBooleanValue(c.AllowFeatureFontColorSelector, true),
                AllowFeatureFontColors = !String.IsNullOrWhiteSpace(c.AllowFeatureFontColors)
                     ? c.AllowFeatureFontColors
                    :   "000,800000,8B4513,2F4F4F,008080,000080,4B0082,696969," +
                        "B22222,A52A2A,DAA520,006400,40E0D0,0000CD,800080,808080," +
                        "F00,FF8C00,FFD700,008000,0FF,00F,EE82EE,A9A9A9," +
                        "FFA07A,FFA500,FFFF00,00FF00,AFEEEE,ADD8E6,DDA0DD,D3D3D3," +
                        "FFF0F5,FAEBD7,FFFFE0,F0FFF0,F0FFFF,F0F8FF,E6E6FA,FFF",
                AllowFeatureBackgroundColorSelector = DefaultBooleanValue(c.AllowFeatureBackgroundColorSelector, true),
                AllowFeatureFormFields = DefaultBooleanValue(c.AllowFeatureFormFields, true),
                AllowFeatureTables = DefaultBooleanValue(c.AllowFeatureTables, true),
            };

            dotNetHelper = DotNetObjectReference.Create(this);

            jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./_content/FreeBlazor/HtmlEditor.Razor.js?v=" + Guid.NewGuid().ToString().Replace("-", ""));

            _editorInstalled = await jsModule.InvokeAsync<bool>("HtmlEditorInstalled");

            if (!_editorInstalled) {
                _editorLoading = true;
                StateHasChanged();
                await jsModule.InvokeVoidAsync("HtmlEditorLoad");

                // It can take a few seconds for the ckeditor.js script to load, so try a few checks.
                for(int x = 0; x < 50; x++) {
                    _editorInstalled = await jsModule.InvokeAsync<bool>("HtmlEditorInstalled");
                    if (_editorInstalled) {
                        break;
                    }

                    await System.Threading.Tasks.Task.Delay(100);
                }

                if (_editorInstalled) {
                    _editorLoading = false;
                    StateHasChanged();
                } else {
                    Console.WriteLine("LOAD FAILED FOR CK EDITOR");
                }
            }

            if (_editorInstalled) {
                await jsModule.InvokeVoidAsync("HtmlEditorSetDotNetHelper", dotNetHelper);
                await jsModule.InvokeVoidAsync("HtmlEditorSetupEditor", _id, _config, _value);

                if (SetFocusOnLoad != null && (bool)SetFocusOnLoad == true) {
                    await SetFocus();
                }
            }
        }
    }

    protected override void OnInitialized()
    {
        //RenderUploadForm();
    }

    protected bool DefaultBooleanValue(bool? ConfigValue, bool Default)
    {
        return ConfigValue.HasValue ? (bool)ConfigValue : Default;
    }

    /// <summary>
    /// Returns the current HTML from the editor.
    /// </summary>
    /// <returns>An awaitable string containing the HTML.</returns>
    public async Task<string> GetHTML()
    {
        // string output = String.Empty;

        // if (_editorInstalled && jsModule != null) {
        //     output = await jsModule.InvokeAsync<string>("HtmlEditorGetValue", _id);
        // }

        // return output;
        return _value;
    }

    /// <summary>
    /// Inserts text at the current cursor position in the HTML editor.
    /// </summary>
    /// <param name="value">The text to insert.</param>
    /// <param name="asHtml">Indicates if this is plain text or HTML. Defaults to true.</param>
    /// <returns>An awaitable Task.</returns>
    public async Task InsertText(string value, bool asHtml = true)
    {
        if (_editorInstalled && jsModule != null) {
            await jsModule.InvokeVoidAsync("HtmlEditorInsertText", _id, value, asHtml);
        }
    }

    /// <summary>
    /// Used internally in javascript interop to update the component when the mode changes.
    /// </summary>
    /// <param name="mode"></param>
    [JSInvokable]
    public void ModeHasChanged(string mode)
    {
        if(mode != _mode) {
            _mode = mode;

            if (OnModeChanged != null) {
                OnModeChanged.DynamicInvoke(_mode);
            }

            StateHasChanged();
        }
    }

    /// <summary>
    /// Sets the focus to the HTML editor.
    /// </summary>
    /// <returns>An awaitable Task.</returns>
    public async Task SetFocus()
    {
        if(_editorInstalled && jsModule != null) {
            await jsModule.InvokeVoidAsync("HtmlEditorFocus", _id);
        }
    }

    /// <summary>
    /// Sets the HTML for the editor.
    /// </summary>
    /// <param name="value">The HTML.</param>
    /// <returns>An awaitable Task.</returns>
    public async Task SetHTML(string? value)
    {
        if (String.IsNullOrWhiteSpace(value)) {
            value = String.Empty;
        }

        if (_editorInstalled && jsModule != null) {
            await jsModule.InvokeVoidAsync("HtmlEditorUpdate", _id, value);
        }
    }

    [JSInvokable]
    public void ValueChanged(string? value)
    {
        _value = !String.IsNullOrWhiteSpace(value) ? value : "";

        if (OnUpdate != null) {
            OnUpdate.Invoke(_value);
        }

        if (OnValueChanged != null) {
            OnValueChanged.DynamicInvoke();
        }
    }

    /// <summary>
    /// The configuration for the HTML editor.
    /// </summary>
    public class HtmlEditorConfiguration
    {
        /// <summary>
        /// The Simple View includes a limited set of formatting tools. 
        /// When enabled the other options for showing and hiding elements are ignored and 
        /// only the following options are shown: 
        /// Bold, Italic, Underline, Decrease Indent, Increase Indent,
        /// Align Left, Center, Align Right, Justify, Text Color, Background Color, and Show Blocks.
        /// </summary>
        public bool? SimpleView { get; set; }
        /// <summary>
        /// Option to hide the source button. Defaults to "false".
        /// </summary>
        public bool? HideSourceButton { get; set; }
        /// <summary>
        /// Option to indicate that the HTML editor is a required field.
        /// </summary>
        public bool? Required { get; set; }
        /// <summary>
        /// Option to override the default Placeholder text of "HTML Editor".
        /// </summary>
        public string? PlaceholderText { get; set; }
        /// <summary>
        /// Option to allow the Bold option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureBold { get; set; }
        /// <summary>
        /// Option to allow the Italic option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureItalic { get; set; }
        /// <summary>
        /// Option to allow the Underline option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureUnderline { get; set; }
        /// <summary>
        /// Option to allow the Strikethrough option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureStrikeThrough { get; set; }
        /// <summary>
        /// Option to allow the Subscript option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureSubscript { get; set; }
        /// <summary>
        /// Option to allow the Superscript option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureSuperscript { get; set; }
        /// <summary>
        /// Option to allow the Style Selector option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureStyleSelector { get; set; }
        /// <summary>
        /// Option to allow the Font Selector option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureFontSelector { get; set; }
        /// <summary>
        /// Option to override the default listing of fonts.
        /// </summary>
        public string? AllowFeatureFonts { get; set; }
        /// <summary>
        /// Option to allow the Font Size selector option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureFontSizeSelector { get; set; }
        /// <summary>
        /// Option to override teh default list of font sizes.
        /// </summary>
        public string? AllowFeatureFontSizes { get; set; }
        /// <summary>
        /// Option to allow the Font Color option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureFontColorSelector { get; set; }
        /// <summary>
        /// Option to override the default list of font colors for the font color selector.
        /// </summary>
        public string? AllowFeatureFontColors { get; set; }
        /// <summary>
        /// Option to allow the Font Background Color option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureBackgroundColorSelector { get; set; }
        /// <summary>
        /// Option to allow the Form Fields option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureFormFields { get; set; }
        /// <summary>
        /// Option to allow the Table option. Defaults to "true".
        /// </summary>
        public bool? AllowFeatureTables { get; set; }
    }
}