@inject IJSRuntime jsRuntime
<table class="password-generator">
    <tbody>
        <tr>
            <td>
                <label for="@(_id + "-password-generator-length")">
                    @((MarkupString)_language.PasswordLength)
                </label>:
                <input type="number" step="1" min="5" max="99" class="clean-input password-generator-length-input" value="@_options.Length" @onchange="OnChangeLength" />
                <div>
                    <input type="range" class="form-range" id="@(_id + "-password-generator-length")" min="5" max="99" value="@_options.Length" @oninput="OnChangeLength" />
                </div>
            </td>
            <td>
                <div class="nowrap">
                    <input type="checkbox" id="@(_id + "-password-generator-requireUpperCase")"
                           checked="@_options.RequireUppercase" @onchange="OnChangeRequireUpperCase" />
                    <label for="@(_id + "-password-generator-requireUpperCase")">
                        @((MarkupString)_language.RequireUppercase)
                    </label>
                </div>
                <div class="nowrap">
                    <input type="checkbox" id="@(_id + "-password-generator-requireLowerCase")"
                        checked="@_options.RequireLowercase" @onchange="OnChangeRequireLowerCase" />
                    <label for="@(_id + "-password-generator-requireLowerCase")">
                        @((MarkupString)_language.RequireLowercase)
                    </label>
                </div>
                <div class="nowrap">
                    <input type="checkbox" id="@(_id + "-password-generator-requireNumbers")"
                        checked="@_options.RequireNumbers" @onchange="OnChangeRequireNumbers" />
                    <label for="@(_id + "-password-generator-requireNumbers")">
                        @((MarkupString)_language.RequireNumbers)
                    </label>
                </div>
                <div class="nowrap">
                    <input type="checkbox" id="@(_id + "-password-generator-requireSpecialCharacters")"
                        checked="@_options.RequireSpecialCharacters" @onchange="OnChangeRequireSpecialCharacters" />
                    <label for="@(_id + "-password-generator-requireSpecialCharacters")">
                        @((MarkupString)_language.RequireSpecialCharacters)
                    </label>
                </div>
            </td>
        </tr>
    </tbody>
</table>
<table class="password-generator">
    <tbody>
        <tr>
            <td>
                <input id="@_id" type="text" value="@_password" @oninput="@((e) => OnPasswordChanged(e))" class="@(_class + " password-generator-password")" autocomplete="off" spellcheck="false" />
            </td>
            <td>
                <button type="button" class="@_refreshButtonClass" @onclick="RenderPasswordForm" title="@_language.Refresh">
                    @if (!String.IsNullOrWhiteSpace(_refreshIcon)) {
                        @((MarkupString)_refreshIcon)
                    }
                </button>
            </td>
        </tr>
    </tbody>
</table>
@code {
    protected string _class = "";
    protected string _id = "";
    protected bool _loaded = false;
    protected string _password = "";
    protected string _refreshButtonClass = "";
    protected string _refreshIcon = "";

    protected Options _options = new Options();

    private static string lettersUpperCase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private static string lettersLowerCase = "abcdefghijklmnopqrstuvwxyz";
    private static string numbers = "1234567890";
    private static string specialCharacters = "!@#$%^&*()-+=/";
    private static Random randomNumberGenerator = new Random();

    protected Language _language = new Language();

    private IJSObjectReference? jsModule;

    /// <summary>
    /// The EventCallback that receives generated passwords.
    /// </summary>
    [Parameter] public Action<string>? OnPasswordGenerated { get; set; }

    /// <summary>
    /// An optional delegate that will be called when the value is updated.
    /// This delegate will receive no parameter.
    /// </summary>
    [Parameter] public Delegate? OnValueChanged { get; set; }

    /// <summary>
    /// An Id for the password field element. If none is specified a random Id will be generated.
    /// </summary>
    [Parameter]
    public string? Id { get; set; }

    /// <summary>
    /// An optional class to add to the refresh button.
    /// </summary>
    [Parameter]
    public string? RefreshButtonClass { get; set; }

    /// <summary>
    /// An optional class to add to the generated password field.
    /// </summary>
    [Parameter]
    public string? Class { get; set; }

    /// <summary>
    /// An optional length for the new password (a number between 5 and 99)
    /// </summary>
    [Parameter]
    public int? Length { get; set; }

    /// <summary>
    /// An optional icon to use on the refresh button.
    /// </summary>
    [Parameter]
    public string? RefreshIcon { get; set; }

    /// <summary>
    /// Option to require uppercase characters in the new password.
    /// </summary>
    [Parameter]
    public bool? RequireUpperCase { get; set; }

    /// <summary>
    /// Option to require lowercase characters in the new password.
    /// </summary>
    [Parameter]
    public bool? RequireLowerCase { get; set; }

    /// <summary>
    /// Option to require numbers in the new password.
    /// </summary>
    [Parameter]
    public bool? RequireNumbers { get; set; }

    /// <summary>
    /// Option to require special characters in the new password.
    /// </summary>
    [Parameter]
    public bool? RequireSpecialCharacters { get; set; }

    /// <summary>
    /// An optional object that can be used to override the various text labels on the control.
    /// </summary>
    [Parameter]
    public Language? LanguageItems { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./_content/FreeBlazor/GeneratePassword.Razor.js?v=" + Guid.NewGuid().ToString().Replace("-", ""));

            if (!RequireUpperCase.HasValue && !RequireLowerCase.HasValue && !RequireNumbers.HasValue && !RequireSpecialCharacters.HasValue) {
                var settings = await jsModule.InvokeAsync<string>("CookieRead", "freeblazor-generate-password-settings");
                if (!String.IsNullOrWhiteSpace(settings)) {
                    var deserialized = System.Text.Json.JsonSerializer.Deserialize<Options>(settings);
                    if (deserialized != null) {
                        _options = deserialized;
                    }
                }
            }

            _class = !String.IsNullOrWhiteSpace(Class) ? Class : "";

            _id = !String.IsNullOrWhiteSpace(Id) ? Id : Guid.NewGuid().ToString().Replace("-", "");

            _refreshButtonClass = !String.IsNullOrWhiteSpace(RefreshButtonClass) ? RefreshButtonClass : "password-generator-refresh-button";

            _refreshIcon = !String.IsNullOrWhiteSpace(RefreshIcon) ? RefreshIcon : "<span class='password-generator-default-refresh-icon'>&#8634;</span>";

            _language = new Language {
                    PasswordLength = LanguageItems != null && !String.IsNullOrWhiteSpace(LanguageItems.PasswordLength) ? LanguageItems.PasswordLength : "Password Length",
                    Refresh = LanguageItems != null && !String.IsNullOrWhiteSpace(LanguageItems.Refresh) ? LanguageItems.Refresh : "Refresh",
                    RequireLowercase = LanguageItems != null && !String.IsNullOrWhiteSpace(LanguageItems.RequireLowercase) ? LanguageItems.RequireLowercase : "Require Lowercase",
                    RequireNumbers = LanguageItems != null && !String.IsNullOrWhiteSpace(LanguageItems.RequireNumbers) ? LanguageItems.RequireNumbers : "Require Numbers",
                    RequireSpecialCharacters = LanguageItems != null && !String.IsNullOrWhiteSpace(LanguageItems.RequireSpecialCharacters) ? LanguageItems.RequireSpecialCharacters : "Require Special Characters",
                    RequireUppercase = LanguageItems != null && !String.IsNullOrWhiteSpace(LanguageItems.RequireUppercase) ? LanguageItems.RequireUppercase : "Require Uppercase",
                };

            // If values were not set with parameters check storage, then use defaults if not in storage.
            if (_options.Length < 5) {
                _options.Length = 14;
            }

            if (RequireUpperCase.HasValue) {
                _options.RequireUppercase = (bool)RequireUpperCase;
            }

            if (RequireLowerCase.HasValue) {
                _options.RequireLowercase = (bool)RequireLowerCase;
            }

            if (RequireNumbers.HasValue) {
                _options.RequireNumbers = (bool)RequireNumbers;
            }

            if (RequireSpecialCharacters.HasValue) {
                _options.RequireSpecialCharacters = (bool)RequireSpecialCharacters;
            }

            if (!_options.RequireUppercase && !_options.RequireLowercase && !_options.RequireNumbers && !_options.RequireSpecialCharacters) {
                _options.RequireUppercase = true;
                _options.RequireLowercase = true;
                _options.RequireNumbers = true;
            }

            _loaded = true;

            RenderPasswordForm();
        }
    }

    protected void OnChangeLength(ChangeEventArgs e)
    {
        if(e.Value != null) {
            try {
                _options.Length = Convert.ToInt32(e.Value);
                RenderPasswordForm();
            }catch { }
        }
    }

    protected void OnChangeRequireUpperCase(ChangeEventArgs e)
    {
        if(e.Value != null) {
            try {
                _options.RequireUppercase = Convert.ToBoolean(e.Value);
                RenderPasswordForm();
            } catch { }
        }
    }

    protected void OnChangeRequireLowerCase(ChangeEventArgs e)
    {
        if (e.Value != null) {
            try {
                _options.RequireLowercase = Convert.ToBoolean(e.Value);
                RenderPasswordForm();
            } catch { }
        }
    }

    protected void OnChangeRequireNumbers(ChangeEventArgs e)
    {
        if (e.Value != null) {
            try {
                _options.RequireNumbers = Convert.ToBoolean(e.Value);
                RenderPasswordForm();
            } catch { }
        }
    }

    protected void OnChangeRequireSpecialCharacters(ChangeEventArgs e)
    {
        if (e.Value != null) {
            try {
                _options.RequireSpecialCharacters = Convert.ToBoolean(e.Value);
                RenderPasswordForm();
            } catch { }
        }
    }

    protected void OnPasswordChanged(ChangeEventArgs e)
    {
        string value = String.Empty;

        if(e != null && e.Value != null) {
            value += e.Value.ToString();
        }

        _password = value;

        if (OnPasswordGenerated != null) {
            OnPasswordGenerated.DynamicInvoke(_password);
        }

        if (OnValueChanged != null) {
            OnValueChanged.DynamicInvoke();
        }
    }

    protected async void RenderPasswordForm()
    {
        if (!_options.RequireUppercase && !_options.RequireLowercase && !_options.RequireNumbers && !_options.RequireSpecialCharacters) {
            _options.RequireUppercase = true;
            _options.RequireLowercase = true;
            _options.RequireNumbers = true;
        }

        if (_options.Length < 5) {
            _options.Length = 14;
        }

        if (_options.Length > 99) {
            _options.Length = 99;
        }

        _password = GenerateNewPassword();

        if (OnPasswordGenerated != null) {
            OnPasswordGenerated.DynamicInvoke(_password);
        }

        if (OnValueChanged != null) {
            OnValueChanged.DynamicInvoke();
        }

        await SaveSettings();

        StateHasChanged();
    }

    protected async Task SaveSettings()
    {
        if(jsModule != null) {
            string settings = System.Text.Json.JsonSerializer.Serialize(_options);
            await jsModule.InvokeVoidAsync("CookieWrite", "freeblazor-generate-password-settings", settings);
        }
    }

    protected string GenerateNewPassword()
    {
        string output = "";

        if (_options.Length < 5) { _options.Length = 32; }

        string allCharacters = "";
        if (_options.RequireUppercase) { allCharacters += lettersUpperCase; }
        if (_options.RequireLowercase) { allCharacters += lettersLowerCase; }
        if (_options.RequireNumbers) { allCharacters += numbers; }
        if (_options.RequireSpecialCharacters) { allCharacters += specialCharacters; }
        if (String.IsNullOrEmpty(allCharacters)) { allCharacters = lettersUpperCase + lettersLowerCase + numbers + specialCharacters; }

        int lowerpass = 0;
        int upperpass = 0;
        int numpass = 0;
        int specialcharpass = 0;
        string positionArray = "0123456789";

        if (_options.Length < positionArray.Length) {
            positionArray = positionArray.Substring(0, _options.Length);
        }

        lowerpass = getRandomPosition(ref positionArray);
        upperpass = getRandomPosition(ref positionArray);
        numpass = getRandomPosition(ref positionArray);
        specialcharpass = getRandomPosition(ref positionArray);

        for (int i = 0; i < _options.Length; i++) {
            if (i == lowerpass && _options.RequireUppercase) {
                output += getRandomChar(lettersUpperCase);
            } else if (i == upperpass && _options.RequireLowercase) {
                output += getRandomChar(lettersLowerCase);
            } else if (i == numpass && _options.RequireNumbers) {
                output += getRandomChar(numbers);
            } else if (i == specialcharpass && _options.RequireSpecialCharacters) {
                output += getRandomChar(specialCharacters);
            } else {
                output += getRandomChar(allCharacters);
            }
        }

        return output;
    }

    private static string getRandomChar(string fullString)
    {
        return fullString.ToCharArray()[(int)Math.Floor(randomNumberGenerator.NextDouble() * fullString.Length)].ToString();
    }

    private static int getRandomPosition(ref string positionArray)
    {
        int output;

        string randomChar = positionArray.ToCharArray()[(int)Math.Floor(randomNumberGenerator.NextDouble() * positionArray.Length)].ToString();
        output = int.Parse(randomChar);
        positionArray = positionArray.Replace(randomChar, "");

        return output;
    }

    public class Language
    {
        public string PasswordLength { get; set; } = "";
        public string Refresh { get; set; } = "";
        public string RequireLowercase { get; set; } = "";
        public string RequireNumbers { get; set; } = "";
        public string RequireSpecialCharacters { get; set; } = "";
        public string RequireUppercase { get; set; }  = "";
    }

    protected class Options
    {
        public int Length { get; set; } = 14;
        public bool RequireLowercase { get; set; } = true;
        public bool RequireUppercase { get; set; } = true;
        public bool RequireNumbers { get; set; } = true;
        public bool RequireSpecialCharacters { get; set; } = false;
    }
}
