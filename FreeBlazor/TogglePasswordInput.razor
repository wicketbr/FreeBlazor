@inject IJSRuntime jsRuntime
@if (Disabled) {
    <div class="@InputClass">
        @if (DisabledIconsAtEnd) {
            if (_showPassword) {
                <span class="ms-1 fixed-width-font">@_password</span>
            } else {
                <span class="me-1 fixed-width-font">@MaskPassword(_password)</span>
            }
        }

        @if (_showPassword) {
            <span class="toggle-password-icon" @onclick="ToggleShowPassword" title="@TextHidePassword">
                @((MarkupString)_iconShowPassword)
            </span>
        } else {
            <span class="toggle-password-icon" @onclick="ToggleShowPassword" title="@TextShowPassword">
                @((MarkupString)_iconHidePassword)
            </span>
        }
        @if (ShowCopyPasswordButton) {
            <span class="toggle-password-icon" title="@TextCopyToClipboard" @onclick="CopyPasswordToClipboard">
                @((MarkupString)_iconCopyToClipboard)
            </span>
        }

        @if (!DisabledIconsAtEnd) {
            if (_showPassword) {
                <span class="ms-1 fixed-width-font">@_password</span>
            } else {
                <span class="me-1 fixed-width-font">@MaskPassword(_password)</span>
            }
        }
    </div>
} else {
    if (UseBootstrapInputGroup) {
        <div class="input-group">
            <input type="@(_showPassword ? "text" : "password")"
                   class="@InputClass"
                   id="@_id"
                   placeholder="@_placeholder"
                   value="@_password"
                   @oninput="PasswordChanged"
                   autocomplete="new-password" />

            @if (_showPassword) {
                <span class="input-group-text toggle-password-icon" @onclick="ToggleShowPassword" title="@TextHidePassword">
                    @((MarkupString)_iconShowPassword)
                </span>
            } else {
                <span class="input-group-text toggle-password-icon" @onclick="ToggleShowPassword" title="@TextShowPassword">
                    @((MarkupString)_iconHidePassword)
                </span>
            }

            @if (ShowCopyPasswordButton) {
                <span class="input-group-text toggle-password-icon" title="@TextCopyToClipboard" @onclick="CopyPasswordToClipboard">
                    @((MarkupString)_iconCopyToClipboard)
                </span>
            }
        </div>
    } else {
        <div class="toggle-password-input">
            <table>
                <tr>
                    <td style="width:auto;">
                        <input type="@(_showPassword ? "text" : "password")"
                               class="@InputClass"
                               id="@_id"
                               placeholder="@_placeholder"
                               value="@_password"
                               @oninput="PasswordChanged"
                               autocomplete="new-password" />
                    </td>

                    <td style="width:1%;">
                        @if (_showPassword) {
                            <span class="toggle-password-icon" @onclick="ToggleShowPassword" title="@TextHidePassword">
                                @((MarkupString)_iconShowPassword)
                            </span>
                        } else {
                            <span class="toggle-password-icon" @onclick="ToggleShowPassword" title="@TextShowPassword">
                                @((MarkupString)_iconHidePassword)
                            </span>
                        }
                    </td>

                    @if (ShowCopyPasswordButton) {
                        <td style="width:1%;">
                            <span class="toggle-password-icon" title="@TextCopyToClipboard" @onclick="CopyPasswordToClipboard">
                                @((MarkupString)_iconCopyToClipboard)
                            </span>
                        </td>
                    }
                </tr>
            </table>
        </div>
    }
    
}

@code {
    /// <summary>
    /// Optional delegate function that will receive the updated password.
    /// </summary>
    [Parameter] public Action<string>? OnChange { get; set; }

    /// <summary>
    /// Optional delegate function that will receive the true/false value when the show/hide password button is toggled.
    /// </summary>
    [Parameter] public Action<bool>? OnToggledShowPassword { get; set; }

    /// <summary>
    /// An optional delegate that will be called when the value is updated.
    /// This delegate will receive no parameter.
    /// </summary>
    [Parameter] public Delegate? OnValueChanged { get; set; }

    /// <summary>
    /// Optional class to add to the input element (defaults to 'form-control')
    /// </summary>
    [Parameter] public string Class { get; set; } = "form-control";

    /// <summary>
    /// Option to disable the input element
    /// </summary>
    [Parameter] public bool Disabled { get; set; }

    /// <summary>
    /// Option to place the icons after the password element when the control is disabled (defaults to true)
    /// </summary>
    [Parameter] public bool DisabledIconsAtEnd { get; set; } = false;

    /// <summary>
    /// Icon for the Copy to Clipboard button. This can either be a full HTML element or just a class name. Defaults to FontAwesome 'fa-regular fa-copy'.
    /// </summary>
    [Parameter] public string? IconCopyToClipboard { get; set; }

    /// <summary>
    /// Icon for the Hide Password button. This can either be a full HTML element or just a class name. Default to FontAwesome 'fa-regular fa-eye-slash'.
    /// </summary>
    [Parameter] public string? IconHidePassword { get; set; }

    /// <summary>
    /// Icon for the Show Password button. This can either be a full HTML element or just a class name. Default to FontAwesome 'fa-regular fa-eye'.
    /// </summary>
    [Parameter] public string? IconShowPassword { get; set; }

    /// <summary>
    /// Optional Id for the input element. If not specified a random Id will be generated.
    /// </summary>
    [Parameter] public string? Id { get; set; }

    /// <summary>
    /// Optional delegate function that will be called when the password is copied to the clipboard so you can show
    /// a notice in your user interface.
    /// </summary>
    [Parameter] public Delegate? PasswordCopiedToClipboard { get; set; }

    /// <summary>
    /// Optional placeholder text for the input element.
    /// </summary>
    [Parameter] public string? Placeholder { get; set; }

    /// <summary>
    /// If specified, this class will be added to the input element when empty.
    /// </summary>
    [Parameter] public string? RequiredClass { get; set; }

    /// <summary>
    /// Option to show the Copy Password button to copy the password to the clipboard.
    /// </summary>
    [Parameter] public bool ShowCopyPasswordButton { get; set; } = true;

    /// <summary>
    /// Indicates if the password should initially be in the visible state.
    /// </summary>
    [Parameter] public bool ShowPassword { get; set; }

    /// <summary>
    /// Option to override the default text for "Copy to Clipboard"
    /// </summary>
    [Parameter] public string? TextCopyToClipboard { get; set; }

    /// <summary>
    /// Option to override the default text for "Hide Password"
    /// </summary>
    [Parameter] public string? TextHidePassword { get; set; }

    /// <summary>
    /// Option to override the default text for "Show Password"
    /// </summary>
    [Parameter] public string? TextShowPassword { get; set; }

    /// <summary>
    /// Option to show the password using a Bootstrap input group. If false a table will be used.
    /// </summary>
    [Parameter] public bool UseBootstrapInputGroup { get; set; }

    /// <summary>
    /// Optional initial value for the input element.
    /// </summary>
    [Parameter] public string? Value { get; set; }

    protected string _id = "";
    protected string _idGuid = "";
    protected IJSObjectReference? jsModule;
    protected string _password = "";
    protected string _placeholder = "";
    protected bool _showPassword = false;

    protected string _iconCopyToClipboard = "";
    protected string _iconHidePassword = "";
    protected string _iconShowPassword = "";

    protected string _textCopyToClipboard = "";
    protected string _textHidePassword = "";
    protected string _textShowPassword = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender) {
            jsModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import",
                "./_content/FreeBlazor/TogglePasswordInput.Razor.js?v=" + Guid.NewGuid().ToString().Replace("-", ""));
        }
    }

    protected override void OnInitialized()
    {
        _idGuid = Guid.NewGuid().ToString().ToLower().Replace("-", "");
        _showPassword = ShowPassword;
    }

    protected override void OnParametersSet()
    {
        _id = !String.IsNullOrWhiteSpace(Id) ? Id : _idGuid;
        _password = !String.IsNullOrWhiteSpace(Value) ? Value : "";

        _iconCopyToClipboard = !String.IsNullOrWhiteSpace(IconCopyToClipboard) ? IconCopyToClipboard : "fa-regular fa-copy";
        _iconHidePassword = !String.IsNullOrWhiteSpace(IconHidePassword) ? IconHidePassword : "fa-regular fa-eye-slash";
        _iconShowPassword = !String.IsNullOrWhiteSpace(IconShowPassword) ? IconShowPassword : "fa-regular fa-eye";
        _placeholder = !String.IsNullOrWhiteSpace(Placeholder) ? Placeholder : "";

        if (!_iconCopyToClipboard.Contains("<")) {
            _iconCopyToClipboard = "<i class=\"" + _iconCopyToClipboard + "\"></i>";
        }
        if (!_iconHidePassword.Contains("<")) {
            _iconHidePassword = "<i class=\"" + _iconHidePassword + "\"></i>";
        }
        if (!_iconShowPassword.Contains("<")) {
            _iconShowPassword = "<i class=\"" + _iconShowPassword + "\"></i>";
        }

        _textCopyToClipboard = !String.IsNullOrWhiteSpace(TextCopyToClipboard) ? TextCopyToClipboard : "Copy to Clipboard";
        _textHidePassword = !String.IsNullOrWhiteSpace(TextHidePassword) ? TextHidePassword : "Hide Password";
        _textShowPassword = !String.IsNullOrWhiteSpace(TextShowPassword) ? TextShowPassword : "Show Password";
    }

    protected async Task CopyPasswordToClipboard()
    {
        if(jsModule != null && !String.IsNullOrWhiteSpace(_password)) {
            await jsRuntime.InvokeVoidAsync("CopyToClipboard", _password);

            if (PasswordCopiedToClipboard != null) {
                PasswordCopiedToClipboard.DynamicInvoke();
            }
        }
    }

    protected string InputClass
    {
        get {
            string output = Class;

            if(!String.IsNullOrWhiteSpace(RequiredClass) && String.IsNullOrWhiteSpace(_password)) {
                if (!String.IsNullOrWhiteSpace(output)) {
                    output += " ";
                }
                output += RequiredClass;
            }

            return output;
        }
    }

    protected string MaskPassword(string? password, int minimumLength = 6)
    {
        string output = String.Empty;

        if (!String.IsNullOrWhiteSpace(password)) {
            output = new String('*', password.Length);
        }

        if (output.Length < minimumLength) {
            output = new string('*', minimumLength);
        }

        return output;
    }

    protected void PasswordChanged(ChangeEventArgs e)
    {
        string value = "";

        if(e != null && e.Value != null) {
            try {
                value += e.Value.ToString();
            } catch { }
        }

        _password = value;

        if (OnChange != null) {
            OnChange.DynamicInvoke(_password);
        }

        if (OnValueChanged != null) {
            OnValueChanged.DynamicInvoke();
        }
    }

    protected void ToggleShowPassword()
    {
        _showPassword = !_showPassword;

        if (OnToggledShowPassword != null) {
            OnToggledShowPassword.DynamicInvoke(_showPassword);
        }

        StateHasChanged();
    }
}
